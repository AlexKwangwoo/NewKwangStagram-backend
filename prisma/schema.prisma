// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  photos    Photo[]
  likes     Like[]
  comments  Comment[]
  rooms     Room[]
  Message   Message[]
  followers User[]    @relation("FollowRelation", references: [id])
  following User[]    @relation("FollowRelation", references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  // references: [id]는 user의 ID를 가리킨다
  userId    Int
  // 데이터베이스에 저장되는건 실제로.. userId 이다!!
  //그리고 userId는 실제 photo의 주인이될 userId이다
  file      String
  caption   String?
  hashtags  Hashtag[]
  //헤쉬와 포토는 many to many 관계를 가진다!
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  //like테이블의 필드 photo(실제존재x)는 photoId가 실제photo의 아이디를가진다
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //photoId와 UserId는 유닉크 해야함.. 한포토에 같은사람이 두번 좋아요못하기에
  //photoId가 유닉이라는건.. like부분에 하나의 포토 아이디를 가지는 거지만
  //  @@unique([photoId, userId]) 이건 두개가 하나의 유니크 키가 된다 보면됨!
  //ex photoId:1 userId:1 => 11, photoId:1 userId:2 => 12
  //그래서 11, 12만 안겹치면 생성된다!
  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  photoId   Int
}

model Room {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
